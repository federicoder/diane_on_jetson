
primo terminale: (per pubblicare un messaggio vuoto)
ros2 topic pub /cloud sensor_msgs/msg/PointCloud2 "{
  header: {frame_id: 'map'},
  height: 1,
  width: 1,
  fields: [],
  is_bigendian: false,
  point_step: 16,
  row_step: 16,
  data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  is_dense: true
}"

[pubblico un messaggio fake]:
ros2 topic pub /input_topic_name sensor_msgs/msg/PointCloud2 "{
  header: {
    frame_id: 'map'
  },
  height: 1,
  width: 1,
  fields: [
    {name: 'x', offset: 0, datatype: 7, count: 1},
    {name: 'y', offset: 4, datatype: 7, count: 1},
    {name: 'z', offset: 8, datatype: 7, count: 1}
  ],
  is_bigendian: false,
  point_step: 12,
  row_step: 12,
  data: [0, 0, 128, 63, 0, 0, 0, 64, 0, 0, 64, 64],
  is_dense: true
}"

secondo terminale: (per abilitare il plugin appena creato)
ros2 run point_cloud_transport republish raw in:=/cloud c3lab out:=/cloud_c3lab
ros2 run point_cloud_transport republish --ros-args -p in_transport:=raw -p out_transport:=c3lab --remap in:=input_topic_name --remap out:=ouput_topic_name

terzo terminale: (per visualizzare il messaggio ricevuto dal plugin)
ros2 topic echo /cloud_c3lab

## debug:
per buildare il plugin:
export LD_LIBRARY_PATH=/usr/local/lib/python3.8/dist-packages/torch/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/lib/python3.8/dist-packages/torch/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
colcon build --merge-install --event-handlers console_direct+
source install/setup.bash
ros2 run point_cloud_transport list_transports

# rimuovi tutte immagini docker:
docker rmi $(docker images -q) -f

# lanciare compressione solo con c3lab: (se li vuoi tutti rimuovi l'argomento -p test.points.enable_pub_plugins:='["point_cloud_transport/c3lab"]' )
ros2 run c3lab_test_pub c3lab_test_pub_node \
  --ros-args \
    -p test.points.enable_pub_plugins:='["point_cloud_transport/c3lab"]' \
    -p test.points.c3lab.bw:=5000000.0

# settare runtime bw:
ros2 param set /c3lab_test_pub test.points.c3lab.bw 500000.0

# get bw:
ros2 param get /c3lab_test_pub test.points.c3lab.bw

# uso del republish:

ros2 run point_cloud_transport republish --ros-args -p in_transport:=c3lab -p out_transport:=raw --remap in:=/test/points/c3lab --remap out:=/out/c3lab/decoded


ros2 run point_cloud_transport republish --ros-args -p in_transport:=c3lab -p out_transport:=raw --remap in:=/out/c3lab --remap out:=/out/c3lab/decoded


ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=c3lab -p out_transport:=raw  --remap in:=/out/c3lab --remap out:=/out/c3lab/decoded

# funziona così però devo gestire gli rgba:

# input pointcloud output cl3ab
ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=c3lab -p out_transport:=raw  --remap in/c3lab:=/out/c3lab --remap out/raw:=/out/c3lab/decoded
# input c3lab output cl3ab decompressa:
ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=raw -p out_transport:=c3lab --remap in:=/zed/zed_node/point_cloud/cloud_registered --remap out/c3lab:=/out/c3lab

# visualizzazione camera:
zed_left_camera_frame

ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=diane -p out_transport:=raw  --remap in/diane:=/out/diane --remap out/raw:=/out/diane/decoded
ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=raw -p out_transport:=diane --remap in:=/zed/zed_node/point_cloud/cloud_registered --remap out/diane:=/out/diane


ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=diane -p out_transport:=raw  --remap in/diane:=/out/diane --remap out/raw:=/out/diane/decoded
ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=raw -p out_transport:=diane --remap in:=/test/points --remap out/diane:=/out/diane


## Dopo la creazione dei file _edit

# get parameters from republisher tool:
ros2 param dump /point_cloud_republisher 

# per settare i parametri real time:
ros2 param set /point_cloud_republisher out.diane.bandwidth 820000.0
ros2 param set /point_cloud_republisher out.diane.fps 40.0

# per vedere la banda puoi usare questi o rqt:
ros2 topic bw /out
ros2 topic hz /out

# pubblicare i nodi republish con nomi diversi per differenziare publisher da subscriber:

ros2 run point_cloud_transport republish raw diane \
  --ros-args \
    -r __node:=repub_encode \
    -p in_transport:=raw  -p out_transport:=diane \
    -r in:=/zed/zed_node/point_cloud/cloud_registered \
    -r out/diane:=/out/diane \
    --log-level INFO
ros2 run point_cloud_transport republish diane raw \
  --ros-args \
    -r __node:=repub_decode \
    -p in_transport:=diane -p out_transport:=raw \
    -r in/diane:=/out/diane \
    -r out/raw:=/out/diane/decoded \
    --log-level INFO


    ros2 param list /repub_encode 
    ros2 param list /repub_decode 

    ## dopo il launcher:

    # avvio launcher:
    ros2 launch diane_control dual_repub.launch.py pc_topic:=/zed/zed_node/point_cloud/cloud_registered

    topic da mandare in unrelyable

----------------
################

TODO:

creare un topic per ricevere i dati filtrati ed è da questo che devi calcolarti i bit che riesci a ricevere in un secondo e mandarlo come parametro 
al launcher che aggiornerà direttamente il parametro del nodo publisher (del plugin che si occupa della compressione).

creare una pointcloud che mi raffiguri un cubo o un parallelepipedo per vedere come si comporta la pointcloud.


versione scheda ed sdk utilizzata:
jetpack v 5.1.1 rev. 1 xiaver nx



ros2 run point_cloud_transport republish raw diane \
  --ros-args \
    -r __node:=repub_encode \
    -p in_transport:=raw  -p out_transport:=diane \
    -r in:=/zed/point_cloud \
    -r out/diane:=/out/diane \
    --log-level INFO





ros2 run point_cloud_transport republish raw --out_transport diane --ros-args -r __node:=repub_encode -p in_transport:=raw  -p out_transport:=diane -r in:=/zed/point_cloud -r out/diane:=/out/diane --log-level INFO
    ros2 run point_cloud_transport republish --in_transport raw --out_transport diane --ros-args --remap in:=/zed/point_cloud --remap out:=out/diane
export essenziali per far riconoscere il plugin diane:

export LD_LIBRARY_PATH=/usr/local/lib/python3.8/dist-packages/torch/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/lib/python3.8/dist-packages/torch/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH

e devi usare questo comando per lanciare i nodi ros del pointcloudtransport:

ros2 run point_cloud_transport republish --in_transport raw --out_transport diane --ros-args --remap in:=/zed/point_cloud --remap out:=out/diane

ros2 run point_cloud_transport republish --in_transport diane --out_transport raw --ros-args --remap in:=out/diane --remap out:=out/decoded






prove mie:

così funziona a livello di rqt:


ros2 run point_cloud_transport republish raw --out_transport diane --ros-args -r __node:=repub_encode -p in_transport:=raw  -p out_transport:=diane -r in:=/zed/point_cloud -r out/diane:=/out/diane --log-level INFO


ros2 run point_cloud_transport republish  --in_transport diane --out_transport raw --ros-args -r __node:=repub_decode -p in_transport:=diane  -p out_transport:=raw -r in/diane:=/out/diane -r out/raw:=/out/decoded --log-level INFO



altra prova:



ros2 run point_cloud_transport republish raw diane \
  --ros-args \
    -r __node:=repub_encode \
    -p in_transport:=raw  -p out_transport:=diane \
    -r in:=/zed/cloud_cloud/ \
    -r out/diane:=/out/diane \
    --log-level INFO
    
    ros2 run point_cloud_transport republish raw diane --ros-args -r __node:=repub_encode -p in_transport:=raw  -p out_transport:=diane -r in:=/zed/cloud_cloud  -r out/diane:=/out/diane --log-level INFO


    
    
ros2 run point_cloud_transport republish diane raw \
  --ros-args \
    -r __node:=repub_decode \
    -p in_transport:=diane -p out_transport:=raw \
    -r in/diane:=/out/diane \
    -r out/raw:=/out/diane/decoded \
    --log-level INFO
    
    
    
    
    
    
    
    
    ################
    issue github:
    
    
    ros2 run point_cloud_transport republish --ros-args -p out_transport:=diane -p in_transport:=raw --ros-args --log-level info --ros-args -r __node:=point_cloud_republisher --remap in:=/zed/point_cloud --remap out/diane:=/pointcloud_diane



    ros2 run point_cloud_transport republish \
--ros-args -p out_transport:=raw \
-p in_transport:=diane \
--ros-args \
--log-level info \
 --ros-args \
-r __node:=point_cloud_decoded \
--remap in:=/pointcloud_diane \
--remap out/raw:=/pointcloud_decoded



così lo prende ma non invia messaggi:


ros2 run point_cloud_transport republish \
--out_transport diane \
--in_transport raw \
--ros-args \
--log-level DEBUG \
 --ros-args \
-r __node:=point_cloud_republisher \
--remap in:=/zed/point_cloud \
--remap out/diane:=/poincloud_diane

ros2 run point_cloud_transport republish --ros-args --log-level DEBUG -p in_transport:=c3lab -p out_transport:=raw  --remap in/c3lab:=/out/c3lab --remap out/raw:=/out/c3lab/decoded

ros2 run point_cloud_transport republish \
--out_transport raw \
--in_transport diane \
--ros-args \
--log-level DEBUG \
 --ros-args \
-r __node:=point_cloud_decoder \
--remap in/diane:=/poincloud_diane \
--remap out:=/decoded



con gdb:

ros2 run --prefix 'gdb -ex run --args' point_cloud_transport republish \
--out_transport diane \
--in_transport raw \
--ros-args \
--log-level DEBUG \
-r __node:=point_cloud_encoder \
--remap in:=/zed/point_cloud \
--remap out/diane:=/pointcloud_diane



ros2 run --prefix 'gdb -ex run --args' point_cloud_transport republish \
--out_transport raw \
--in_transport diane \
--ros-args \
--log-level DEBUG \
-r __node:=point_cloud_decoder \
--remap in/diane:=/pointcloud_diane \
--remap out:=/decoded
--qos-profile best_effort


senza gdb:
ros2 run point_cloud_transport republish \
--out_transport diane \
--in_transport raw \
--ros-args \
--log-level DEBUG \
-r __node:=point_cloud_encoder \
--remap in:=/zed/point_cloud \
--remap out/diane:=/pointcloud_diane

ros2 run point_cloud_transport republish \
--out_transport raw \
--in_transport diane \
--ros-args \
--log-level DEBUG \
-r __node:=point_cloud_decoder \
--remap in/diane:=/pointcloud_diane \
--remap out:=/decoded


per lanciare launcher che modifica bw e fps dinamicamente:
ros2 run dynamic_encoder_pkg dynamic_encoder_launcher   --encoder-node /point_cloud_encoder   --param-bandwidth pointcloud_diane.bandwidth   --param-fps pointcloud_diane.fps   --topic-decoded /decoded   --topic-encoded /pointcloud_diane   --period 10.0

directory log csv:
data_csv
